<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>枫声 Yongfeng&#39;s Blog</title>
    <description>Yongfeng Zhang&#39;s blog full-stack software engineer</description>
    <link>http://localhost:4000//</link>
    <atom:link href="http://localhost:4000//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 13 Jan 2016 19:46:16 -0800</pubDate>
    <lastBuildDate>Wed, 13 Jan 2016 19:46:16 -0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      
      <item>
        <title>摩托车无离合换挡</title>
        <description>&lt;h3&gt;快排(Quick shifter)&lt;/h3&gt;

&lt;p&gt;我刚开始也并不知道摩托车其实可以不用离合器就实现换档。直到某一天在浏览摩托配件的时候看到了快排（quick shifter）这个东西。这个配件的功能就是可以让你不用捏离合，直接进行换档。&lt;/p&gt;

&lt;p&gt;在Google上搜索quick shifter，就可以看到非常多的品牌和其工作原理的介绍。其应用的原理并不复杂。简单来说，就是摩托车变速箱的构造使得车手只要在引擎的牵引力减小的那一瞬间，去升档，就可以在不使用离合器的情况下直接将档位进上去。快排就是利用了这个特点，在换档踏板上安装一个压力感应器，当车手执行换档动作时，感应器感受到压力，传递一个信号给ECU(Engine Control Unit)，ECU将引擎的点火停止极小的时间段，或者短暂的切断其供油。这样引擎的牵引力就减弱了，车手便可以顺利进档。&lt;/p&gt;

&lt;div class=&quot;md-10-suffix-1&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;/assets/img/post-motor-qs/quick_shifter_on_bike.jpg&quot; alt=&quot;Quick shifter&quot;/&gt;
    &lt;figcaption&gt;装在摩托上的快排&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;可以看到，上图就是一个安装在换档踏板（图片底部）上的quick shifter，体积并不大，在美国的价格大约两、三百刀。&lt;/p&gt;

&lt;p&gt;相比于传统的换档方式，使用快排换档所需的时间极短，动力损失也几乎可以忽略不计，而且不会产生由于离合和油门配合不好所导致的震动，整个过程非常平顺。因为没有离合器的分离与结合，也避免了传统换档方式对离合器片造成的磨损。&lt;/p&gt;

&lt;p&gt;快排往往是职业车手为了节省那么几十、几百毫秒的换档时间才会用到的配件。对于一般的使用来说，是完全没有必要的。我基本没有见到过有非职业车手专门去给自己的摩托装quick shifter的。因为即使没有它，我们也可以通过练习来实现无离合换档，而quick shifter所提供的毫秒级的换档时间缩减在比赛之外很难有用武之地。下面就跟大家分享一下不使用quick shifter实现无离合换档的操作方法。&lt;/p&gt;

&lt;h3&gt;如何不依赖快排&lt;/h3&gt;

&lt;p&gt;我们已经知道了不用离合器换档的原理，即在进档的同时减小引擎的牵引力输出，也就是收油。那么通过练习，我们完全可以不用quick shifter自己来实现这个操作。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;预备动作：左脚放到换档板下方，做好升档的准备。&lt;/li&gt;
&lt;li&gt;左脚向上轻踢换档踏板，同时右手迅速回油门。&lt;/li&gt;
&lt;li&gt;档位卡入之后立刻加油，使摩托保持正常行驶。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;上面的第二步需要反复练习，才能熟练掌握。如果实在很难掌握到时机，可以先用左脚给换档板一个向上的压力，然后再收油，这样当引擎输出减弱时，档位在压力的作用下就会自动卡入。逐渐熟练之后，往往就可以做到回油和升档的同步。&lt;/p&gt;

&lt;p&gt;还有一个关键点是油门回多少的问题。这个跟车子和档位都相关，需要自己不断去试，去感觉。但是一般来说回油幅度不会很大，且以我自己的经验，档位越高，回的幅度就越小，且越容易操作。就我的CBR来说，需要回油的幅度是很小的，往往只需要往收油的方向快速的抖动一下油门就足够了。如果回油太多，动力损失过大，等换档结束再加油的时候很容易造成车子的震动。&lt;/p&gt;

&lt;h3&gt;总结&lt;/h3&gt;

&lt;p&gt;上述不使用离合直接换档的方法大家都应该尽可能掌握，因为摩托车除了进1档起步之外，在其它档位是完全没有必要使用离合器的。我在不少论坛上都请教过一些老手，结论是只要操作正确，这种换档方式完全不会对车子造成任何损坏。相反，它还能减少离合器片的磨损。现在有些厂商已经开始提供原厂quick shifter选配了，比如宝马S1000RR。&lt;/p&gt;

&lt;p&gt;大家可能已经注意到，上文只提到了升档，那么减档呢？减档的操作跟升档正好相反，在换档的瞬间需要稍微加油。但是只有配备了slippery clutch的摩托车才能实现无离合减档，平时使用最多的还是升档。&lt;/p&gt;
</description>
        
          <description>&lt;h3&gt;快排(Quick shifter)&lt;/h3&gt;

&lt;p&gt;我刚开始也并不知道摩托车其实可以不用离合器就实现换档。直到某一天在浏览摩托配件的时候看到了快排（quick shifter）这个东西。这个配件的功能就是可以让你不用捏离合，直接进行换档。&lt;/p&gt;
</description>
        
        <pubDate>Sun, 10 Jan 2016 14:47:55 -0800</pubDate>
        <link>http://localhost:4000//cn/blog/motor-qs/</link>
        <guid isPermaLink="true">http://localhost:4000//cn/blog/motor-qs/</guid>
        
        
        <category>lifestyle</category>
        
      </item>
      
    
      
      <item>
        <title>加州摩托车驾照取得流程及驾校课程总结</title>
        <description>&lt;h3&gt;来加州骑摩托吧！&lt;/h3&gt;

&lt;p&gt;加利福利亚，一个从来都不缺少灿烂阳光和美丽海岸的golden land。一个终年都风和日丽，冬暖夏凉的地方。上帝不来自加州，也一定住在加州。这片土地是摩托和敞篷的天堂。&lt;/p&gt;

&lt;p&gt;即使在其他地方处于酷暑或严冬之时，加州人也依然可以骑着摩托在宽阔的街道上兜风。除了宜人的气候，“摩托天堂”的名号还有赖于这里特别适合摩托车的道路状况、交规、治安、停车设施以及司机们良好的素质。道路宽阔、路况优质、治安良好（大部分地区）。除了三藩市建在山上，有很多上下坡之外，其他地方也都是一马平川，操作起来毫不费劲。不仅好骑，还很好停，很多停车场都有专门的摩托车停车位，在街边停车的话也可以将车子横过来用后轮垂直抵着路堐停放。考虑到南北加繁忙的交通，可以很方便的停车是一个巨大的优势。&lt;/p&gt;

&lt;p&gt;在加州住过的人，一定目睹过摩托车从车流的间隙里穿过。我刚开始看到时，也觉得不可思议。但是后来知道，加州的法规并不禁止摩托和其他车辆共享一条车道，这可能是立法的一个漏洞吧。在很多时候，这确实是非常危险的。但是以我的切身感受，在上下班高峰期，某些路段车流往往都会很长，而且行进缓慢，甚至停止。在这种时候，如果安全距离足够，是完全可以低速在车道之间穿行的。加州交通安全局和CHP(California Highway Patrol)推荐穿行时将速度保持在30mph以下，且和旁边车辆的速度差不要超过10mph。在有摩托穿行的时候，这边的司机也往往会主动向两边移动，以让给摩托车足够的空间。&lt;/p&gt;

&lt;div&gt;
  &lt;figure&gt;
    &lt;img src=&quot;/assets/img/post-motor-intro/lane-sharing.png&quot; alt=&quot;摩托在穿行&quot;/&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;我个人更倾向于让驾驶者自己来判断是否可以安全穿行，而不是一刀切的去禁止。选择摩托通勤，本来就是很低碳环保（粗略估算可以达到80多的MPG）且基本不增加交通拥堵的一种方式，所以这边的司机也都很配合，很礼让。除了会主动给摩托腾出空间以外，我还记得我刚开始上路的时候，有一次起步错挂在了二档，连续熄火了两三次才尝试成功（二档强起……），中间这段时间我后面的一辆大皮卡既没有冲我按喇叭，也没有从旁边绕过，而是一直在那等着，让我非常感动。&lt;/p&gt;

&lt;p&gt;这样一个利人利己，和谐融洽的环境是很可贵的。摩托车相比于汽车只占用了很少的道路资源和环境资源，汽车司机因此也尽量给摩托的通行创造好的条件。在加州骑摩托真是一件愉快的事情！&lt;/p&gt;

&lt;h3&gt;如何取得驾照？&lt;/h3&gt;

&lt;p&gt;考摩托驾照（主要为M1）和考汽车驾照一样，需要先进行笔试，考察应试者对交通规则、紧急情况的应对以及摩托车操作方面的熟悉程度。这里需要注意的是，如果考试时距离你取得汽车驾照的时间超过了一年，那么笔试会有两套题，第一套是汽车驾照笔试题（抽选其中的30%考察），第二套才是摩托车专门的笔试题。至于路考，则并不是必须的。只要参加这边政府认证的摩托车安全课程(参见：&lt;a href=&quot;http://cmsp.msi5.com/&quot;&gt;CMSP: California Motorcyclist Safety Program&lt;/a&gt;)，并且顺利通过评测拿到证书，就可以免去路考。我强烈推荐大家去参加这类课程，而不要直接去DMV路考。主要有下面几个原因。&lt;/p&gt;

&lt;p&gt;首先，骑摩托是一件比开车更危险、对操作技巧和安全知识要求更高的事情，去接受一套正规的训练是很有必要的，因为有一些感觉上是对的东西往往并不安全。比如，在过弯时刹车，听上去很正确，但其实摩托在过弯时至少要保持匀速，最好是加速，边转向边刹车是不安全的操作。其次，DMV的摩托路考很不好通过，对各种细节的考察相当繁琐，相比之下，去上课然后通过课程的评测要简单得多。最后的评测内容全部都是课程里反复训练过的科目，并不是很难。最后，CMSP的认证可以在很多卖摩托车装备的店获得新手打折，比如&lt;a href=&quot;http://www.cyclegear.com/&quot;&gt;Cycle Gear&lt;/a&gt;。在买保险的时候价格往往也会更低。&lt;/p&gt;

&lt;h3&gt;课程信息介绍&lt;/h3&gt;

&lt;p&gt;在这里向大家推荐一家公司，叫&lt;a href=&quot;http://2wheelsafety.com/&quot;&gt;2 Wheel Safety Training&lt;/a&gt;。我就是在那学的。整个课程只要258刀，有从周四晚上开始，周五半天、周六全天的，也有从周五晚上开始，周六半天、周日全天的时段。总之，一共就一天半的场地训练加一个晚上（3小时左右）的理论学习。他们可以提供摩托和头盔，自己需要准备皮手套以及能包住脚踝的鞋。当然你也可以戴自己的头盔或者骑自己的摩托去！提供这种认证课程的公司有很多，大家只要在Google上搜一下就能找到，可以选择一个离得近的参加。&lt;/p&gt;

&lt;h3&gt;场地训练&lt;/h3&gt;

&lt;p&gt;练习的场地是一个很大的停车场，停车场被分成了很多块，以供几个班同时训练。每一个教练会带大概10个学生，每个人都会有自己的摩托。驾校提供的摩托一般是比较老旧的，排量也很小。最常见的是一款雅马哈的Cruiser，外观和大小都很像2012年的V-STAR 250，但是年份应该早很多。美国这边摩托的控制装置的布局和操作基本都是一样的。只是老一点的车型会多一个choke，专门用于热车，新的车子一般就没有了。然后向下踩左边的踏板是减档，脚背向上勾是加档。各个档位的顺序是：1 N 2 3 4 5 6。其中空档（N）处于半档位置，位于1档和2档之间，从1档换到空挡只需轻轻的向上勾。美国所有的重机，除了宝马和哈雷有些车型特殊之外，都是这样的布局。&lt;/p&gt;

&lt;div class=&quot;md-10-suffix-1&quot;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;/assets/img/post-motor-intro/training_motor.png&quot; alt=&quot;雅马哈V-STAR250&quot;/&gt;
    &lt;figcaption&gt;雅马哈V-STAR 250&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h4&gt;科目&lt;/h4&gt;

&lt;p&gt;训练都是一个项目一个项目进行的。刚开始也会只让挂着一档，双脚都不离地，通过控制离合来前进。但是我觉得整个课程的节奏还是比较快的，毕竟只有一天半的时间。但是你只要会骑自行车，并且开过手动挡的汽车，应该是能轻松搞定的。在这里就不一一介绍每个训练项目了，下面我会总结出我认为比较重要的技巧或者是跟安全息息相关的知识。&lt;/p&gt;

&lt;h5&gt;转弯&lt;/h5&gt;

&lt;p&gt;摩托的转弯原理和汽车是不一样的。快速并且安全的过弯主要需要掌握三个方面的技巧。一是车身倾斜角度的控制，二是速度和牵引力的控制，最后是视线的位置。&lt;/p&gt;

&lt;p&gt;首先谈一下第一点。在转弯训练当中，教练会提到一个词，叫做counter-steering，直译成中文就是反打方向。即在左转的时候向右转龙头，反之亦然。这句话咋听起来有点诡异，很不好理解。其实这里面的原理就是基于摩托转弯时需要向转弯方向倾斜，counter-steering能够帮助摩托车倾斜。以我自己的经验，我觉得counter-steering更确切的说法应该是：向转向一侧的把手施力。也就是说，在左转时，用左手将摩托车往左下方压，在右转时用右手向右下方压。这样就可以使摩托更好的倾斜。至于为什么会叫counter-steering，我想是因为向左压把手的时候龙头会右转，右压的时候会微微左转，刚好和转弯的方向相反吧。用英语解释更佳简明：When making a left turn, push to the left. When making a right turn, push to the right.&lt;/p&gt;

&lt;p&gt;然后是速度和油门的控制。当摩托在转弯过程中是不应该刹车的，相反，正确的做法应该是加大油门。因为在过弯时车身是倾斜的，摩托的总牵引力被分成了向前前进的动力和转向的向心力，这个时候如果刹车，就会使得这两个力都减弱，可能会造成翻车。加大油门可以提供更充足的向心力，降低转弯的难度。我们应该在入弯前刹车，降低速度，过弯途中再加大油门，然后出弯。&lt;/p&gt;

&lt;p&gt;如果在过弯的时候有紧急情况需要刹车的话，应该先将倾斜的摩托调正，停止转弯，然后再直线刹车。总之，边转弯边刹车是禁忌，这两者一定不能同时进行。这里还有一个小技巧，就是用双腿紧紧夹住油箱可以帮助保持平衡，减小晃动。&lt;/p&gt;

&lt;p&gt;最后非常重要的一点是一定要抬头看远处将要行经的道路。左转时需要转头向左，右转则向右，把整个弯道的情况都收入眼中。这个听起来好像没有什么特别的，但是初学者往往都只会直视前方的道路，能够看到的路是非常有限的，直到被教练纠正了很多次之后才会形成正确的习惯。我记得我当时上课的时候被纠正次数最多的就是这点。这里的道理和开车是一样的，当开车通过一个比较长的弯道（左转居多）或者是需要掉头的时候，如果不向左转头有意识的去扫弯道，而是仅仅直视前方的话，车子很容易走偏，转弯不是过大就是过小。在一些比较急的弯或U turn的时候，甚至需要把头转到使眼睛能够从左边前车窗看出去的位置，才能很好的掌控车子的行驶路径。
&lt;div class=&#39;md-10-suffix-1&#39;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;/assets/img/post-motor-intro/motor_turn.jpg&quot; alt=&quot;转弯时的视线方向&quot;/&gt;
    &lt;figcaption&gt;转弯时视线的正确方向&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;大家可以随便在网上搜一些摩托车比赛的图片或视频，看一看专业车手在转弯时视线的方向。&lt;/p&gt;

&lt;h5&gt;刹车&lt;/h5&gt;

&lt;p&gt;摩托车的前刹提供大约70%的制动力，后刹提供剩下的30%，所以主要的制动力都来自前刹。美国这边教的是在任何需要刹车的时候，都要前后刹一起使用。其他的方面则和开汽车是一样的，比如刹车时要看后视镜，确保和后面的车保持足够的距离。如果后面的车跟得太近，可以通过快速的点刹车，来闪刹车灯，以提醒对方。&lt;/p&gt;

&lt;h5&gt;避开障碍物&lt;/h5&gt;

&lt;p&gt;在遇到前方有障碍物时，如果有其他路径的话，最好的办法就是快速的转弯去避开障碍。这里有一个英语词叫swerve，就是突然改变方向的意思。训练课程有专门有一项就是练习swerving。教练会在路上放若干小路障，我们需要绕开路障，从它们之间穿过去。Swerving的要点就是用双手将摩托向左或向右推，同时稍微移动身体向反方向做一个平衡，摩托就会倾斜转向了。&lt;/p&gt;

&lt;p&gt;这里也涉及到了眼睛往哪看的问题。与常识相反，如果我们想要避开障碍物，则一定不能用眼睛去盯着障碍物看，否则后果就是撞上去。新手为了避障，往往会很着急一直看着障碍物，这个习惯一定要改过来。我们只需要确定一次障碍物的大体位置就行了，眼睛始终都应该看将要行经的道路（和转弯一样）。这里有一个非常有用的经验，就是眼睛盯住哪里看，就会撞上哪里，我亲测有效，对开车也同样适用。&lt;/p&gt;

&lt;p&gt;基础的部分就先说到这里吧。文章如有纰漏之处，请大家一定斧正。&lt;/p&gt;

&lt;p&gt;下一篇我准备分享一下我对无离合换挡（clutchless-shift）的认识。刚接触到这个概念的时候，我也是在Quora, reddit甚至Yahoo Answers上面各种请教。歪果仁们都非常热心的帮助我，很耐心的给我解释。我经过反复练习，最终熟练掌握。记得第一次不用离合就踢入档位的那一刹那，就犹如发现了新大陆一样！&lt;/p&gt;
</description>
        
          <description>&lt;h3&gt;来加州骑摩托吧！&lt;/h3&gt;

&lt;p&gt;加利福利亚，一个从来都不缺少灿烂阳光和美丽海岸的golden land。一个终年都风和日丽，冬暖夏凉的地方。上帝不来自加州，也一定住在加州。这片土地是摩托和敞篷的天堂。&lt;/p&gt;
</description>
        
        <pubDate>Sat, 02 Jan 2016 11:31:20 -0800</pubDate>
        <link>http://localhost:4000//cn/blog/motor-intro/</link>
        <guid isPermaLink="true">http://localhost:4000//cn/blog/motor-intro/</guid>
        
        
        <category>lifestyle</category>
        
      </item>
      
    
      
      <item>
        <title>IFTTT：沟通应用的桥梁</title>
        <description>&lt;h3&gt;序言&lt;/h3&gt;

&lt;p&gt;在2015年的尾牙，琳琅满目的社交平台已经成为了我们生活中不可或缺的一部分。可以说，我们的生活状态有相当一部分都是通过各种互联网平台表现与传播的。它们同时也反映了我的自我认知和外在形象。盛世之下，各种相关应用已是呈井喷之态。&lt;/p&gt;

&lt;p&gt;其中，有偏向于搭建公共、开放平台的Twitter和微博，有基于熟人小圈子互动的微信和Snapchat，也有介于两者之间的Instagram和Facebook。其中Facebook又更偏重于朋友间的常规联络和分享，以及适量的在公共主页和热点事件上的互动。相比之下，Instagram则是一个全面封闭的侧重于营销和做个人品牌推广（branding）的平台（特别是对于摄影师，设计师，模特等而言）。在这些巨人之下，还有着千千万万的“小”公司占据着各种细分市场，比如陌陌，抱抱，17……&lt;/p&gt;

&lt;p&gt;如此之多的应用共同编织出了我们丰富的线上、线下生活，服务了我们的方方面面。那么，有没有什么办法能够将它们连接起来，让我们的生活更智能呢？&lt;/p&gt;

&lt;h3&gt;IFTTT是什么？&lt;/h3&gt;

&lt;p&gt;今天的主角终于出场了。IFTTT，一家总部位于旧金山的新创公司，致力于让人们发挥创造力，去控制自己喜欢的产品和应用。让我们想象一下，假如我们在更新微博状态的时候，想同时将这条状态分享到Facebook上（自动翻墙了？），假如我们想在朋友生日的时候自动通过Facebook或者微博进行问候，假如我们想让我们的Facebook和Twitter里面的个人信息保持同步，等等。我们应该怎么做呢？IFTTT为我们提供了一个完全自动化的解决方案。其实，IFTTT的名字来源于其功能：&lt;strong style=&quot;color:#3BB9FF;&quot;&gt;if this, then that&lt;/strong&gt;。对于之前的情景，我们发现全部都可以套进这句话当中：if有新的微博状态发布，then将其分享到Facebook。if年／月／日，then发送Facebook或微博消息。if Facebook用户信息变动，then在Twitter账户中进行相同的设置。只要我们想要连接的应用在IFTTT的平台上推出了自己的服务，那么我们就可以根据它们提供的服务种类，向搭乐高积木一样构建出既有创意，又方便实用的功能。&lt;/p&gt;

&lt;h3&gt;生态系统及功能详述&lt;/h3&gt;

&lt;p&gt;从成立到现在短短几年，IFTTT平台上已经有了上百个频道。在其术语当中，频道（Channel）即对应一个应用，或是说产品。比如微博是一个频道，Facebook是另外一个频道。
&lt;div class=&#39;md-10-suffix-1&#39;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;/assets/img/post-ifttt-intro/channels.png&quot; alt=&quot;IFTTT上的应用&quot;/&gt;
    &lt;figcaption&gt;IFTTT上的应用&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;国外大多数比较流行的应用都已经在上面有了自己的频道，并且支持相当多的功能。但不得不说，国内的公司在其平台上的存在感还很低，目前我只看到了微博，并且仅提供简单的功能接口，比如监测到新发微博，发送微博等。&lt;/p&gt;

&lt;p&gt;我们已经说到，IFTTT这个平台，由上百个频道组成。而根据其对平台功能的抽象（&lt;strong style=&quot;color:#3BB9FF;&quot;&gt;if this, then that&lt;/strong&gt;模型），一个频道又由&lt;strong&gt;Triggers&lt;/strong&gt;和&lt;strong&gt;Actions&lt;/strong&gt;组成。其中，Trigger是一个频道可以为其他频道提供的信息。
&lt;div class=&#39;md-10-suffix-1&#39;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;/assets/img/post-ifttt-dev/triggers.png&quot; alt=&quot;Facebook Triggers&quot;/&gt;
    &lt;figcaption&gt;Facebook Triggers&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;上图是Facebook可以提供的部分Trigger，即是 &lt;strong style=&quot;color:#3BB9FF;&quot;&gt;if this, then that&lt;/strong&gt; 这个模型中的&lt;strong&gt;this&lt;/strong&gt;部分。&lt;/p&gt;

&lt;p&gt;Action则是一个频道接到其控制频道（提供Trigger）的信息之后，可以采取的操作。&lt;/p&gt;

&lt;div class=&#39;md-10-suffix-1&#39;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;/assets/img/post-ifttt-dev/actions.png&quot; alt=&quot;Twitter Actions&quot;/&gt;
    &lt;figcaption&gt;Twitter Actions&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;上图是Twitter支持的部分Action。所以，当我们把这两个频道连接在一起的时候，我们先在Facebook上选择一个Trigger，比如“New status message by you”，然后再在Twitter上选择一个Action，比如“Post a tweet”。这样，每当我们在Facebook上更新一条状体，这条状态就会自动被发布到我们的Twitter上面。最终组装完成的模型就是”if New status mssage by you, then Post a tweet”。简单易用。&lt;/p&gt;

&lt;p&gt;需要说明的是，一个频道可以既有Trigger，又有Action。在上面的例子中，我们完全可以将Twitter和Facebook调换位置，让我们在Twitter上的行为去驱动Facebook。提供什么样的Trigger和Action给用户，取决于频道的开发团队。&lt;/p&gt;

&lt;h3&gt;更多的创意&lt;/h3&gt;

&lt;p&gt;虽然我在序言和后面的说明中都是以社交类App作为例子，但是IFTTT并不局限于此。任何一个产品都可以在其平台中搭建自己的频道，包括智能硬件（须有服务器端）。在IFTTT里，两个应用组成的连接，被称为一个Recipe。在它们的网站中，已经有了成千上万的Recipe。这其中大部分都来自用户。当用户自己搭建了一个Recipe之后，如果他觉得很酷，就可以将其发布出去，供他人使用。这种基于UG(User-generated Content)的方式，对于保持平台的活力也非常有帮助。下面简单给大家截取一些Recipe。&lt;/p&gt;

&lt;div class=&#39;md-10-suffix-1&#39;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;/assets/img/post-ifttt-intro/recipes1.png&quot; alt=&quot;Smart Home Recipes&quot;/&gt;
    &lt;figcaption&gt;智能家居的Recipes&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;div class=&#39;md-10-suffix-1&#39;&gt;
  &lt;figure&gt;
    &lt;img src=&quot;/assets/img/post-ifttt-intro/recipes2.png&quot; alt=&quot;Android Recipes&quot;/&gt;
    &lt;figcaption&gt;安卓手机的Recipes&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h3&gt;工作原理&lt;/h3&gt;

&lt;p&gt;在这样一个架构当中，IFTTT充当着一个中间人的角色。当一个频道上线之后，IFTTT的服务器会每隔15分钟去访问一个Trigger的节点，如果得到新数据，则自动向这个Trigger所连接的Action节点发送一条指令，以驱动一个操作。当然实际情况要稍微复杂一点，比如用户可以向Trigger提供输入、另一类只有Action的Recipe（称为“Do Recipe”）和更加实时的解决方案等等。具体的原理和开发指南可以参见我的另一篇文章：&lt;a href=&quot;/blog/ifttt-development/&quot;&gt;Channel Development on IFTTT&lt;/a&gt;。在了解了上述原理之后，想必大家已经发现，只要IFTTT不被墙，那么我们还可以将它作为桥梁去控制墙外的应用。赶快&lt;a href=&quot;https://ifttt.com/recipes&quot;&gt;体验&lt;/a&gt;一下吧。&lt;/p&gt;
</description>
        
          <description>&lt;h3&gt;序言&lt;/h3&gt;

&lt;p&gt;在2015年的尾牙，琳琅满目的社交平台已经成为了我们生活中不可或缺的一部分。可以说，我们的生活状态有相当一部分都是通过各种互联网平台表现与传播的。它们同时也反映了我的自我认知和外在形象。盛世之下，各种相关应用已是呈井喷之态。&lt;/p&gt;
</description>
        
        <pubDate>Thu, 31 Dec 2015 13:31:20 -0800</pubDate>
        <link>http://localhost:4000//cn/blog/ifttt-intro/</link>
        <guid isPermaLink="true">http://localhost:4000//cn/blog/ifttt-intro/</guid>
        
        
        <category>technology</category>
        
      </item>
      
    
      
      <item>
        <title>Channel Development on IFTTT</title>
        <description>&lt;h3&gt; What is IFTTT? &lt;/h3&gt;

&lt;p&gt; Suppose every time you update your status on Facebook, you also want to post exactly the same content to your Twitter
  account. And every time you upload a photo to Instagram, you want it to be saved to your Dropbox as well.
  How would you do it automatically? Here is when IFTTT comes in. It is short for
  &quot;if&lt;strong style=&quot;color:#3BB9FF;&quot;&gt; this&lt;/strong&gt;, then &lt;strong style=&quot;color:#3BB9FF;&quot;&gt;that&lt;/strong&gt;&quot;.
  Fairly intuitive. You can put whatever you want in &lt;strong style=&quot;color:#3BB9FF;&quot;&gt; this&lt;/strong&gt; and
  &lt;strong style=&quot;color:#3BB9FF;&quot;&gt; that&lt;/strong&gt;.&lt;p&gt;


&lt;h4&gt; Channels, Triggers and Actions &lt;/h4&gt;
&lt;p&gt; Channels are Twitter, Facebook, email, Google Drive etc. Triggers are what can be used to prompt an action,
  such as &quot;New status message&quot;, &quot;New photo post&quot;, and &quot;You are tagged in a photo&quot; from Facebook. Action is the
  work that IFTTT undertakes as a result of a Trigger. Examples are &quot;Send me an email&quot; from the email channel,
  &quot;Create a status message&quot; from Facebook, and even &quot;Update device wallpaper&quot; from the Android device channel. &lt;/p&gt;

&lt;p&gt; Now, to get our first job done, we only need &quot;if &lt;strong style=&quot;color:#3BB9FF;&quot;&gt;New status message&lt;/strong&gt;,
  then &lt;strong style=&quot;color:#3BB9FF;&quot;&gt;Post a tweet&lt;/strong&gt;.&quot; The former is a &lt;strong&gt;Trigger&lt;/strong&gt; provided by
  Facebook, while the latter is an &lt;strong&gt;Action&lt;/strong&gt; from Twitter. We only need to connect to these two
  channels with &lt;em&gt;OAuth&lt;/em&gt; and select the appropriate Trigger and Action from them respectively. &lt;/p&gt;

&lt;p&gt;&lt;div class=&#39;md-10-suffix-1&#39;&gt;
    &lt;figure&gt;
      &lt;img src=&quot;/assets/img/post-ifttt-dev/triggers.png&quot; alt=&quot;Facebook Triggers&quot;/&gt;
      &lt;figcaption&gt;Figure 1. Facebook Triggers&lt;/figcaption&gt;
    &lt;/figure&gt;
  &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div class=&#39;md-10-suffix-1&#39;&gt;
    &lt;figure&gt;
      &lt;img src=&quot;/assets/img/post-ifttt-dev/actions.png&quot; alt=&quot;Twitter Actions&quot;/&gt;
      &lt;figcaption&gt;Figure 2. Twitter Actions&lt;/figcaption&gt;
    &lt;/figure&gt;
  &lt;/div&gt;&lt;/p&gt;

&lt;h3&gt; How does it work under the hood? &lt;/h3&gt;

&lt;p&gt;Finally, we get to our topic: Development on IFTTT. The way it works is mainly the concern of
channel developers. Their documentation is pretty good, but there are still confusions and undocumented stuff.&lt;/p&gt;

&lt;p&gt;Since I&amp;#39;ve been developing a channel on it for months, and had a lot of email exchanges with their support team regarding
my own confusions and undocumented mechanisms, I think I can help others get a better understanding of how it works.&lt;/p&gt;

&lt;p&gt;As we already know, Triggers and Actions are the fundamental building blocks of IFTTT.
We will see how they work in a short while.&lt;/p&gt;

&lt;h4&gt; How Trigger works &lt;/h4&gt;

&lt;p&gt;So how does IFTTT know that there is a change in your Trigger and that change should fire an Action?
It polls the server of the channel which provided the Trigger every 15 minutes. As a channel developer, we should
return an array of items. Each item should have an unique ID and a timestamp. The IDs are used to prevent Actions from
firing more than once on the same item. So IFTTT keeps a record of all the items it gets, and triggers the Action once there
is a new item (identified by the ID field) coming in.&lt;/p&gt;

&lt;p&gt;The items should also contain any data that might be used by the Action. In our Facebook -&amp;gt; Twitter example above, the
Facebook &lt;strong&gt;New status message&lt;/strong&gt; Trigger should provide at least the content of the message as a string in addition to
timestamp and ID. The content of the message is called the &lt;strong&gt;Ingredient&lt;/strong&gt; which can be used by the Action. In this case,
the Twitter Action &lt;strong&gt;Post a tweet&lt;/strong&gt; can use that Ingredient to tweet. A typical data stream you should return looks like
below:&lt;/p&gt;

&lt;div class=&#39;md-10-suffix-1&#39;&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;It&amp;#39;s so great to be home again!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;banksy, brooklyn&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;posted_at&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2013-12-09T09:23:00-07:00&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;meta&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;14b9-1fd2-acaa-5df5&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;timestamp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1383597267&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;School is ending, I&amp;#39;m heading back home soon!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;banksy, nyc&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;posted_at&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2013-11-29T03:23:00-07:00&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;meta&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ffb27-a63e-18e0-18ad&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;timestamp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1383596355&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;IFTTT has a great test framework that every channel needs to pass before it can be published. One requirements of the
test is that at least 3 items should be returned each poll unless limited by IFTTT itself through a request parameter.
It seems weird at first. You may wonder what if a user hasn&amp;#39;t updated his/her Facebook for a long time? What should
we return if we are working for Facebook when IFTTT polls our server? We can return nothing, i.e, an empty list with
&amp;#39;data&amp;#39; as its key. It certainly won&amp;#39;t fire any Action, but it&amp;#39;s not recommended. We cannot pass the test if we just
return empty data. The recommended way is to return the user&amp;#39;s old posts. How many? More than 2
and less than 50, according to the documentation. This policy, according to IFTTT, is to make sure our API behaves
like a timeline of events, not a state engine. Since IFTTT only polls our API every 15 minutes, we need to make sure
that they don&amp;#39;t miss anything by returning a list of events.&lt;/p&gt;

&lt;h4&gt; Trigger Fields&lt;/h4&gt;

&lt;p&gt;There is another term called &lt;strong&gt;Trigger Fields&lt;/strong&gt;. It is the user inputs when he/she creates a Trigger. For example,
there&amp;#39;s a Facebook Trigger called &lt;strong style=&quot;color:#3BB9FF;&quot;&gt;New status message by you with hashtag&lt;/strong&gt;.
The user needs to specify the name of the hashtag. Only when there is the specified hashtag in the user&amp;#39;s status,
will the Trigger fire. When IFTTT polls our API, the Trigger Fields will be passed to us in the POST body, and
we should use it in our server logic to decide what to return.&lt;/p&gt;

&lt;p&gt;Trigger Fields can be either static or dynamic. Static ones don&amp;#39;t need IFTTT to query our server. In the above example,
the user can just type in a hashtag value himself. For drop down menu, we can provide a list of options in advance
stored in our IFTTT development console. Dynamic ones, on the other hand, require IFTTT to poll our server to get
the values for the user to choose. There is also a protocol specifies how IFTTT polls our server and
how we should respond in their documentation.&lt;/p&gt;

&lt;h4&gt;The Real-time API&lt;/h4&gt;

&lt;p&gt;When we think about how it works, intuitively we think of posting data to IFTTT&amp;#39;s endpoints when a Trigger should fire,
rather than waiting for them to poll our API. Here is when the real-time API comes in. It provides faster response to
user events.&lt;/p&gt;

&lt;p&gt;At the time I wrote this post, the real-time API is still very simple and primitive. We only need to return
a list of user IDs whose Triggers have changed.&lt;/p&gt;

&lt;p&gt;The user ID comes from the user information endpoint that we provide to IFTTT.
IFTTT polls this endpoint after it acquires the access token through the &lt;em&gt;OAuth2.0&lt;/em&gt; process to make sure that
the user&amp;#39;s access token is valid. We retrieve the corresponding user with the passed-in access token and return a
user ID and username.&lt;/p&gt;

&lt;p&gt;For the real-time API, we just return the same user ID that we return in the user information endpoint. The response
should look like:&lt;/p&gt;

&lt;div class=&#39;md-10-suffix-1&#39;&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;user_id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;23489759&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;user_id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;77956024&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Once IFTTT gets our post, it will poll our Trigger API immediately. At the time of writing, we cannot specify
which Trigger to poll. IFTTT will just poll all the Triggers the user has. So the current real-time API behaves more
like a button that we click to force IFTTT to do a Trigger check. It is still our normal Trigger API that does the
actual work. Notice that if IFTTT detects that we are using the real-time API, it will still poll our API regularly
but at a longer period of time.&lt;/p&gt;

&lt;h4&gt; How Action works&lt;/h4&gt;

&lt;p&gt;Now it should be much easier for us to understand Actions. For each new trigger item, IFTTT will push data to our Action
endpoint with ifttt_source, user and actionFields. We can retrieve the data passed in by Trigger in actionFields. A
sample post looks like:&lt;/p&gt;

&lt;div class=&#39;md-10-suffix-1&#39;&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;err&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;/ifttt/v&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/actions/new_status_update&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;HTTP/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.1&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;Host:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;api.example-channel.com&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;Authorization:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;Bearer&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;71&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;58&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;af&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;116578&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6402&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;Accept:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;application/json&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;Accept-Charset:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;utf&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-8&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;Accept-Encoding:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;gzip,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;deflate&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;Content-Type:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;application/json&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;X-Request-ID:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ed&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8441&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ea&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;269&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;dd&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;554&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;8e54&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;actionFields&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;New Banksy photo!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Check out a new Bansky photo: http://example.com/images/125&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;ifttt_source&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://ifttt.com/myrecipes/personal/2&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;timezone&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Pacific Time (US &amp;amp; Canada)&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;/div&gt;

&lt;p&gt;Note that there are also static fields and dynamic options for Actions. For example, if we have an Action
&amp;#39;&lt;strong&gt;Post to channel&lt;/strong&gt;&amp;#39; from &lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt;, the Slack needs to provide us with the channels we currently have in our
chat room.&lt;/p&gt;

&lt;h3&gt; Summary &lt;/h3&gt;

&lt;p&gt;Now the way IFTTT works should be pretty simple: It polls our API regularly, if there is new item returned,
it fires an Action. Detailed information can be found in their &lt;a href=&quot;https://developers.ifttt.com/docs/api_reference&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
</description>
        
          <description>&lt;h3&gt; What is IFTTT? &lt;/h3&gt;

&lt;p&gt;&lt;p&gt; Suppose every time you update your status on Facebook, you also want to post exactly the same content to your Twitter
  account. And every time you upload a photo to Instagram, you want it to be saved to your Dropbox as well.
  How would you do it automatically? Here is when IFTTT comes in. It is short for
  &amp;quot;if&lt;strong style=&quot;color:#3BB9FF;&quot;&gt; this&lt;/strong&gt;, then &lt;strong style=&quot;color:#3BB9FF;&quot;&gt;that&lt;/strong&gt;&amp;quot;.
  Fairly intuitive. You can put whatever you want in &lt;strong style=&quot;color:#3BB9FF;&quot;&gt; this&lt;/strong&gt; and
  &lt;strong style=&quot;color:#3BB9FF;&quot;&gt; that&lt;/strong&gt;.&lt;p&gt;&lt;/p&gt;
</description>
        
        <pubDate>Fri, 25 Dec 2015 08:31:20 -0800</pubDate>
        <link>http://localhost:4000//blog/ifttt-development/</link>
        <guid isPermaLink="true">http://localhost:4000//blog/ifttt-development/</guid>
        
        
        <category>technology</category>
        
      </item>
      
    
  </channel>
</rss>
